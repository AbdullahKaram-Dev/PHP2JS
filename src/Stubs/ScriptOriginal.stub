<script id="{ID}">

    {LICENSE}

    const {ALIAS} = {JSON};

    {ALIAS}.clear = function() {
        Object.keys({ALIAS}).forEach(function(property) {
            delete {ALIAS}[property];
        });
    };

    {ALIAS}.clearWithoutFunctions = function() {
        Object.keys({ALIAS}).forEach(function(property) {
            if (typeof {ALIAS}[property] !== 'function') {
                delete {ALIAS}[property];
            }
        });
    };

    {ALIAS}.assign = function() {
        let object = Object.assign({}, {ALIAS});
        return object;
    };

    {ALIAS}.assignAndClear = function() {
        let object = Object.assign({}, {ALIAS});
        {ALIAS}.clear();
        return object;
    };

    {ALIAS}.assignAndClearWithoutFunctions = function() {
        let object = Object.assign({}, {ALIAS});
        {ALIAS}.clearWithoutFunctions();
        return object;
    };

    {ALIAS}.only = function(...properties) {
        let result = {};
        properties.forEach(property => {
            if ({ALIAS}.vars.hasOwnProperty(property)) {
                result[property] = {ALIAS}.vars[property];
            }
        });
        return result;
    };

    {ALIAS}.onlyFunctions = function() {
        let result = {};
        for (const key in {ALIAS}) {
            if (typeof {ALIAS}[key] === 'function') {
                result[key] = {ALIAS}[key];
            }
        }
        return result;
    };

    {ALIAS}.except = function(...properties) {
        let result = {};
        for (const key in {ALIAS}.vars) {
            console.log(key)
            if (!properties.includes(key)) {
                result[key] = {ALIAS}.vars[key];
            }
        }
        return result;
    };

    {ALIAS}.exceptFunctions = function() {
        let result = {};
        for (const key in {ALIAS}) {
            if (typeof {ALIAS}[key] !== 'function') {
                result[key] = {ALIAS}[key];
            }
        }
        return result;
    };

    {ALIAS}.hasProperty = function(property) {
        return {ALIAS}.vars.hasOwnProperty(property);
    };

    {ALIAS}.has = function(property) {
        return {ALIAS}.vars.hasOwnProperty(property);
    };

    {ALIAS}.all = function() {
        return {ALIAS}?.vars;
    };

    {ALIAS}.getAllProperties = function() {
        return Object.keys({ALIAS}.vars);
    };

    {ALIAS}.set = function(property, value) {
        if (!{ALIAS}.vars.hasOwnProperty(property)) {
            {ALIAS}.vars[property] = value;
        } else {
            throw new Error(`Property '${property}' exist in the object '${ALIAS}'.`);
        }
    };

    {ALIAS}.get = function(property) {
        if ({ALIAS}.vars.hasOwnProperty(property)) {
            return {ALIAS}.vars[property];
        } else {
            throw new Error(`Property '${property}' does not exist in the object '${ALIAS}'.`);
        }
    };

    document.getElementById("{ID}").remove();

</script>
